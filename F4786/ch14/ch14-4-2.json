[
    {
        "id": "9695b308.ea676",
        "type": "http in",
        "z": "1ec990f0bb91cfdf",
        "name": "",
        "url": "/teachablemachine",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "2e1c1439.82e0ac"
            ]
        ]
    },
    {
        "id": "9e3e8620.10a7c8",
        "type": "http response",
        "z": "1ec990f0bb91cfdf",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 80,
        "wires": []
    },
    {
        "id": "2e1c1439.82e0ac",
        "type": "template",
        "z": "1ec990f0bb91cfdf",
        "name": "Teachable Machine",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<div>Teachable Machine Image Model</div>\n<button type=\"button\" onclick=\"init()\">Start</button>\n<div id=\"webcam-container\"></div>\n<div id=\"label-container\"></div>\n<script src=\"https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js\"></script>\n<script type=\"text/javascript\">\n    // More API functions here:\n    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image\n\n    // the link to your model provided by Teachable Machine export panel\n    const URL = \"https://teachablemachine.withgoogle.com/models/_mD6F2flP/\";\n\n    let model, webcam, labelContainer, maxPredictions;\n\n    // Load the image model and setup the webcam\n    async function init() {\n        const modelURL = URL + \"model.json\";\n        const metadataURL = URL + \"metadata.json\";\n\n        // load the model and metadata\n        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker\n        // or files from your local hard drive\n        // Note: the pose library adds \"tmImage\" object to your window (window.tmImage)\n        model = await tmImage.load(modelURL, metadataURL);\n        maxPredictions = model.getTotalClasses();\n\n        // Convenience function to setup a webcam\n        const flip = true; // whether to flip the webcam\n        webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip\n        await webcam.setup(); // request access to the webcam\n        await webcam.play();\n        window.requestAnimationFrame(loop);\n\n        // append elements to the DOM\n        document.getElementById(\"webcam-container\").appendChild(webcam.canvas);\n        labelContainer = document.getElementById(\"label-container\");\n        for (let i = 0; i < maxPredictions; i++) { // and class labels\n            labelContainer.appendChild(document.createElement(\"div\"));\n        }\n    }\n\n    async function loop() {\n        webcam.update(); // update the webcam frame\n        await predict();\n        window.requestAnimationFrame(loop);\n    }\n\n    // run the webcam image through the image model\n    async function predict() {\n        var pre_className = \"\";\n        // predict can take in an image, video or canvas html element\n        const prediction = await model.predict(webcam.canvas);\n        for (let i = 0; i < maxPredictions; i++) {\n            const classPrediction =\n                prediction[i].className + \": \" + prediction[i].probability.toFixed(2);\n            labelContainer.childNodes[i].innerHTML = classPrediction;\n            if (prediction[i].probability.toFixed(2) >= 0.8) {\n                var className = prediction[i].className;\n                if (className != pre_className) {\n                    window.postMessage(className, \"http://127.0.0.1:1880/\");\n                    pre_className = className;\n                }    \n            }\n        }\n    }\n</script>\n",
        "output": "str",
        "x": 390,
        "y": 80,
        "wires": [
            [
                "9e3e8620.10a7c8"
            ]
        ]
    },
    {
        "id": "cf192319.572fd",
        "type": "debug",
        "z": "1ec990f0bb91cfdf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 140,
        "wires": []
    },
    {
        "id": "b947d1cb.94a57",
        "type": "ui_text",
        "z": "1ec990f0bb91cfdf",
        "group": "9f916e4.fb0739",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "ClassName:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 290,
        "y": 180,
        "wires": []
    },
    {
        "id": "c9bb81ec.19634",
        "type": "ui_iframe",
        "z": "1ec990f0bb91cfdf",
        "group": "9f916e4.fb0739",
        "name": "",
        "order": 0,
        "width": "10",
        "height": "10",
        "url": "http://127.0.0.1:1880/teachablemachine",
        "origin": "*",
        "scale": 100,
        "x": 110,
        "y": 140,
        "wires": [
            [
                "cf192319.572fd",
                "b947d1cb.94a57"
            ]
        ]
    },
    {
        "id": "9f916e4.fb0739",
        "type": "ui_group",
        "name": "Teachable Machine",
        "tab": "37ac971b.1feee8",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "37ac971b.1feee8",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]